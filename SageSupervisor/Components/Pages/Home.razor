@page "/"
@rendermode InteractiveServer
@using SageSupervisor.Models.DTO
@inject IDbContextFactory<DataContext> contextFactory
@inject ServiceBrokerService BrokerService
@inject IToastService ToastService

<PageTitle>Superviseur Sage</PageTitle>

<h3>Notifications de changements dans les documents</h3>

<FluentDataGrid Items="@_notificationsDoc" Virtualize="true">
    <ChildContent>
        <PropertyColumn Property="@(n => n.UpdatedDate.ToString("dd/MM/yyyy HH:mm:ss"))" Title="Date" />
        <PropertyColumn Property="@(n => n.ChangeType)" Title="Action" />
        <PropertyColumn Property="@(n => n.NumPiece)" Title="N° de Pièce" />
        <PropertyColumn Property="@(n => n.Domaine)" Title="Domaine" />
        <PropertyColumn Property="@(n => n.Type)" Title="Type" />      
    </ChildContent>
    <EmptyContent>
        Pas de données à afficher
    </EmptyContent>
    <LoadingContent>
        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
            Chargement...<br />
            <FluentProgress Width="240px" />
        </FluentStack>
    </LoadingContent>
</FluentDataGrid>

<br />
<br />

<h3>Notifications de changements dans les comptes tiers</h3>

<FluentDataGrid Items="@_notificationsTiers" Virtualize="true">
    <ChildContent>
        <PropertyColumn Property="@(n => n.UpdatedDate.ToString("dd/MM/yyyy HH:mm:ss"))" Title="Date" />
        <PropertyColumn Property="@(n => n.ChangeType)" Title="Action" />
        <PropertyColumn Property="@(n => n.NumTiers)" Title="N° de Tiers" />
        <PropertyColumn Property="@(n => n.Type)" Title="Type" />      
    </ChildContent>
    <EmptyContent>
        Pas de données à afficher
    </EmptyContent>
    <LoadingContent>
        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
            Chargement...<br />
            <FluentProgress Width="240px" />
        </FluentStack>
    </LoadingContent>
</FluentDataGrid>

@code {
    private IQueryable<DocumentChangeDto>? _notificationsDoc = Enumerable.Empty<DocumentChangeDto>().AsQueryable();
    private List<DocumentChangeDto> _notificationsDocList = new List<DocumentChangeDto>();
    private IQueryable<TiersChangeDto>? _notificationsTiers = Enumerable.Empty<TiersChangeDto>().AsQueryable();
    private List<TiersChangeDto> _notificationsTiersList = new List<TiersChangeDto>(); 

    protected override void OnInitialized()
    {
        // Subscribe with InvokeAsync
        BrokerService.DocTableChanged += (sender, e) =>
        {
            InvokeAsync(() => OnDocTableChanged(sender, e));
        };
        BrokerService.TiersTableChanged += (sender, e) =>
        {
            InvokeAsync(() => OnTiersTableChanged(sender, e));
        };
    }

    private void OnDocTableChanged(object? sender, DocumentChangeDto e)
    {
        _notificationsDocList.Insert(0, e);

        _notificationsDoc = _notificationsDocList.AsQueryable();

        ToastService.ShowSuccess($"Changement détecté - Pièce: {e.NumPiece} ({e.ChangeType})");

        StateHasChanged();
    }
    
    private void OnTiersTableChanged(object? sender, TiersChangeDto e)
    {
        _notificationsTiersList.Insert(0, e);

        _notificationsTiers = _notificationsTiersList.AsQueryable();

        ToastService.ShowSuccess($"Changement détecté - Pièce: {e.NumTiers} ({e.ChangeType})");

        StateHasChanged();
    }
}